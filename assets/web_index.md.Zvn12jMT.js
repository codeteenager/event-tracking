import{_ as e,c as a,o as l,a5 as i}from"./chunks/framework.D8ZcJidb.js";const m=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"web/index.md","filePath":"web/index.md","lastUpdated":1722107216000}'),t={name:"web/index.md"},r=i('<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><h2 id="什么是埋点" tabindex="-1">什么是埋点 <a class="header-anchor" href="#什么是埋点" aria-label="Permalink to &quot;什么是埋点&quot;">​</a></h2><p>埋点，它的学名是事件追踪(Event Tracking)，主要是针对特定用户行为或业务过程进行捕获、处理和发送的相关技术及实施过程。埋点是数据领域的一个专业术语，也是互联网领域的一个俗称。埋点是产品数据分析的基础，一般用于推荐系统的反馈、用户行为的监控和分析、新功能或者运营活动效果的统计分析等。 埋点包含两个重要概念：事件(event)，属性(param)</p><ul><li><code>事件（event）：应用中发生了什么，例如用户操作、系统事件或系统错误。</code> 以你拍一产品为例，包含以下事件：enter_practice_after_class(进入课后练习)、leave_practice_after_class(离开课后练习)。</li><li><code>属性（param）：为了描述用户群细分而定义的属性，例如语言偏好或地理位置。</code> 以“进入课后练习”事件为例，它包含如下事件属性：enter_from(从哪个页面来)，class_id(课程id)等。</li><li><code> 属性值（value）：属性的维度，即行为触发时的具体维度。</code> 例如：enter_from：home(主页)、system(系统课)等。</li></ul><h2 id="常见的埋点方案" tabindex="-1">常见的埋点方案 <a class="header-anchor" href="#常见的埋点方案" aria-label="Permalink to &quot;常见的埋点方案&quot;">​</a></h2><ol><li><p>代码埋点</p><ul><li>代码埋点：就是以嵌入代码的形式进行埋点，比如需要监控用户的点击事件，会选择在用户点击时，插入一段代码，保存这个监听行为或者直接将监听行为以某一种数据格式直接传递给服务器端。</li><li>优点是可以在任意时刻，精确的发送或保存所需要的数据信息</li><li>缺点是工作量大</li></ul></li><li><p>可视化埋点</p><ul><li>通过可视化交互的手段，代替代码埋点</li><li>将业务代码和埋点代码分离，提供一个可视化交互的页面，输入为业务代码，通过这个可视化系统，可以在业务代码中自定义的增加埋点事件等等，最后输出的代码耦合了业务代码和埋点代码。</li><li>可视化埋点就是用系统来代替手工插入埋点代码</li></ul></li><li><p>无痕埋点</p><ul><li>前端的任意一个事件绑定一个标识，所有的事件都被记录下来</li><li>通过定期上传记录文件，配合文件解析，解析出来我们想要的数据，并生成可视化报告供专业人员分析</li><li>无痕埋点的优点是采集全量数据，不会出现漏埋和误埋等现象</li><li>缺点是给数据传输和服务器增加压力，也无法灵活定制数据结构</li></ul></li></ol>',6),o=[r];function c(n,d,s,_,p,h){return l(),a("div",null,o)}const f=e(t,[["render",c]]);export{m as __pageData,f as default};
